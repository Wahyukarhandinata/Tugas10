class Node:
    def __init__(self, data=None, next=None):
        self.data = data
        self.next = next

class LinkedList:
    def __init__(self):
        self.head = None

    def print(self):
        if self.head is None:
            print("linked list kosong")  
            return
        itr = self.head
        llstr = ''
        while itr:
            llstr += str(itr.data)+' --> ' if itr.next else str(itr.data)
            itr = itr.next
        print(llstr)

    def get_length(self):
        count = 0
        itr = self.head
        while itr:
            count += 1
            itr = itr.next
        return count

    def insert_at_begining(self, data):
        node = Node(data, self.head)
        self.head = node
        print(f"'{data}' telah ditambahkan di awal.")  

    def insert_at_end(self, data):
        if self.head is None:
            self.head = Node(data, None)
            print(f"'{data}' telah ditambahkan di akhir.")  
            return

        itr = self.head
        while itr.next:
            itr = itr.next

        itr.next = Node(data, None)
        print(f"'{data}' telah ditambahkan di akhir.")  

    def insert_at(self, index, data):
        if index < 0 or index > self.get_length():
            raise Exception("Indeks tidak valid")  

        if index == 0:
            self.insert_at_begining(data)
            return

        count = 0
        itr = self.head
        while itr:
            if count == index - 1:
                node = Node(data, itr.next)
                itr.next = node
                print(f"'{data}' telah ditambahkan pada posisi {index}.")  
                break

            itr = itr.next
            count += 1

    def remove_at(self, index):
        if index < 0 or index >= self.get_length():
            raise Exception("Indeks tidak valid")  

        if index == 0:
            removed_data = self.head.data
            self.head = self.head.next
            print(f"'{removed_data}' telah dihapus.")  
            return

        count = 0
        itr = self.head
        while itr:
            if count == index - 1:
                removed_data = itr.next.data
                itr.next = itr.next.next
                print(f"'{removed_data}' telah dihapus.")  
                break

            itr = itr.next
            count += 1

    def insert_values(self, data_list):
        self.head = None
        for data in data_list:
            self.insert_at_end(data)
        print("Nilai-nilai telah dimasukkan ke dalam daftar.")  

if __name__ == '__main__':
    ll = LinkedList()
    ll.insert_values(["pisang", "mango", "anggur", "jeruk"])
    ll.insert_at(1, "blueberry")
    ll.remove_at(2)
    ll.print()

    ll.insert_values([45, 7, 12, 567, 99])
    ll.insert_at_end(67)
    ll.print()
